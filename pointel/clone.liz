function is_ark(name)
   return liz.starts_with(name, "ark-")
end

function is_app(checker)
   return liz.contains(checker, "application")
end

function is_cmd(checker)
   return liz.contains(checker, "command")
end

function is_web(checker)
   return liz.contains(checker, "webmedia")
end

liz.mk_dir("Arks")
liz.mk_dir("Code")
liz.mk_dir("Code/apps")
liz.mk_dir("Code/cmds")
liz.mk_dir("Code/webs")

failed = {}

clone_page = 0
repo_index = 0
while true do
   clone_page = clone_page + 1
   local resp = liz.get("https://api.github.com/users/emuvi/repos?page=" .. tostring(clone_page))
   local repos = liz.from_json(resp)
   local page_empty = true
   for _, repo in pairs(repos) do
      page_empty = false
      repo_index = repo_index + 1
      local name = repo["name"]
      print("Cloning [" .. tostring(repo_index) .. "] - " .. name)
      local description = repo["description"]
      print(description)
      local to_clone = repo["clone_url"]
      local checker = liz.tolower(description)
      local destiny = ""
      if (is_ark(name)) then
         destiny = "./Arks/"
      elseif (is_app(checker)) then
         destiny = "./Code/apps/"      
      elseif (is_cmd(checker)) then
         destiny = "./Code/cmds/"      
      elseif (is_web(checker)) then
         destiny = "./Code/webs/"      
      end
      if destiny == "" then
         print("ERROR: Could not determine the nature of this repository.")
         table.insert(failed, name)
      else
         local destiny_name = destiny .. "/" .. name
         if liz.has(destiny_name) then
            print("The repository already exists, it will be pulled.")
            local code, output = liz.cmd("git", {"pull"}, destiny_name, false, false)
            if code ~= 0 then
               table.insert(failed, name)
            end
            print(output)
         else
            print("The repository does not exists, it will be cloned.")
            local code, output = liz.cmd("git", {"clone", to_clone}, destiny, false, false)
            if code ~= 0 then
               table.insert(failed, name)
            end
            print(output)
         end
      end
      print("x----------------------------------------------------x")
   end
   if page_empty then
      break;
   end
end
first_failed = true
for _, fail in pairs(failed) do
   if first_failed then
      first_failed = false
      print("ERROR - Was not possible to clone:")
   end
   print(fail)
end
if not first_failed then
   print("x----------------------------------------------------x")
end
print("|                                                    |")
print("|            Finished to Clone Pointel!              |")
print("|                                                    |")
print("x----------------------------------------------------x")
